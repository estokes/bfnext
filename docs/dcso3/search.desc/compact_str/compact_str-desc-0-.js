searchState.loadedDescShard("compact_str", 0, "         About\nA <code>CompactString</code> is a compact string type that can be used …\nA trait that provides convenience methods for creating a …\nAn iterator over the exacted data by <code>CompactString::drain()</code>…\n<code>Display::fmt()</code> returned an error\nCannot allocate memory to hold CompactString\nA possible error value if allocating or resizing a …\nA trait for converting a value to a <code>CompactString</code>.\nA possible error value if …\nA possible error value when converting a <code>CompactString</code> …\nReturns a byte slice of the <code>CompactString</code>’s contents.\nProvides a mutable reference to the underlying buffer of …\nConverts a mutable <code>CompactString</code> to a raw pointer.\nReturns a mutable string slice containing the entire …\nConverts a <code>CompactString</code> to a raw pointer.\nGet back the <code>&amp;&#39;static str</code> constructed by …\nReturns a string slice containing the entire <code>CompactString</code>.\nThe remaining, unconsumed characters of the extracted …\nReturns the capacity of the <code>CompactString</code>, in bytes.\nReduces the length of the <code>CompactString</code> to zero.\nConcatenates all the items of a collection into a …\nCreates a new inline <code>CompactString</code> from <code>&amp;&#39;static str</code> at …\nRemove a range from the <code>CompactString</code>, and return it as an …\nCreates a <code>CompactString</code> using interpolation of runtime …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new inline <code>CompactString</code> from <code>&amp;&#39;static str</code> at …\nReturns the lowercase equivalent of this string slice, as …\nReturns the uppercase equivalent of this string slice, as …\nConvert a <code>String</code> into a <code>CompactString</code> <em>without inlining</em>.\nDecode a <code>UTF-16</code> slice of bytes into a <code>CompactString</code>, …\nDecode a UTF-16–encoded slice <code>v</code> into a <code>CompactString</code>, …\nDecode a slice of bytes as UTF-16 encoded string, in big …\nLossy decode a slice of bytes as UTF-16 encoded string, in …\nDecode a slice of bytes as UTF-16 encoded string, in …\nLossy decode a slice of bytes as UTF-16 encoded string, in …\nConvert a slice of bytes into a <code>CompactString</code>.\nDecode a bytes slice as UTF-8 string, replacing any …\nConverts a vector of bytes to a <code>CompactString</code> without …\nInsert a character at an index.\nInsert string character at an index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>CompactString</code> into a <code>String</code>.\nReturns <code>true</code> if the <code>CompactString</code> has a length of 0, <code>false</code> …\nReturns whether or not the <code>CompactString</code> is heap allocated.\nJoins all the items of a collection, placing a separator …\nReturns the length of the <code>CompactString</code> in <code>bytes</code>, not <code>char</code>…\nCreates a new <code>CompactString</code> from any type that implements …\nCreates a new inline <code>CompactString</code> at compile time.\nRemoves the last character from the <code>CompactString</code> and …\nAppends the given <code>char</code> to the end of this <code>CompactString</code>.\nAppends a given string slice onto the end of this …\nRemoves a <code>char</code> from this <code>CompactString</code> at a byte position …\nCreates a new <code>CompactString</code> by repeating a string <code>n</code> times.\nRemoves the specified range in the <code>CompactString</code>, and …\nEnsures that this <code>CompactString</code>’s capacity is at least …\nRetains only the characters specified by the predicate.\nForces the length of the <code>CompactString</code> to <code>new_len</code>.\nShrinks the capacity of this <code>CompactString</code> with a lower …\nShrinks the capacity of this <code>CompactString</code> to match its …\nSplit the <code>CompactString</code> into at the given byte index.\nReturns a copy of this string where each character is …\nReturns a copy of this string where each character is …\nConverts the given value to a <code>CompactString</code>.\nConverts the given value to a <code>CompactString</code>.\nReturns the lowercase equivalent of this string slice, as …\nReturns the uppercase equivalent of this string slice, as …\nTruncate the <code>CompactString</code> to a shorter length.\nFallible version of <code>CompactString::new()</code>\nFallible version of <code>CompactString::reserve()</code>\nFallible version of <code>ToCompactString::to_compact_string()</code>\nFallible version of <code>CompactString::with_capacity()</code>\nCreates a new empty <code>CompactString</code> with the capacity to fit …")