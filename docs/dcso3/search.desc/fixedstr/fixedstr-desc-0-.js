searchState.loadedDescShard("fixedstr", 0, "<strong>Library for several alternative string types using const </strong>…\nreturns slice of u8 array underneath the zstr, <strong>including </strong>…\nreturns mutable slice of the u8 array underneath, …\nreturns slice of u8 array underneath the zstr without the …\nchecked version of zstr::to_str, but may panic (calls …\nversion of zstr::as_str that does not call <code>unwrap</code>\nreturns maximum capacity in bytes\nTests for ascii case-insensitive equality with another …\nreturns the number of characters in the string regardless …\nconst function that checks that the underlying array of …\nGuarantees that the underlying array of the zstr is …\nresets string to empty string\nconst constructor, to be called from const contexts.  …\nversion of <code>const_make</code> that does not truncate.\nVersion of to_fixedstr! that returns None instead of …\nalias for zstr::make\nReturns the argument unchanged.\nCreates a zstr from a raw pointer by copying bytes until …\nconst function that creates a new <code>zstr&lt;N&gt;</code> with given <code>&amp;[u8]</code> …\nDecodes a UTF-16 encodeded slice. If a decoding error is …\nCalls <code>U::from(self)</code>.\ndetermines if string is an ascii string\nLength of the string in bytes (consistent with str::len). …\nLength of a <code>zstr&lt;N&gt;</code> string in bytes using O(n) linear …\ncreates a new <code>zstr&lt;N&gt;</code> with given &amp;str.  If the length of s …\nin-place modification of ascii characters to lower-case, …\nin-place modification of ascii characters to upper-case, …\ncreates an empty string, equivalent to zstr::default() but …\nreturns the nth character of the zstr\nalias for nth_bytechar (for backwards compatibility)\nreturns the nth byte of the string as a char.  This …\nremove and return last character in string, if it exists\nadds chars to end of current string up to maximum size N …\npushes a single character to the end of the string, …\nalias for zstr::push\nversion of resize that does not allow string truncation …\nconverts an zstr&lt;M&gt; to an zstr&lt;N&gt;. If the length of the …\nReverses <strong>in-place</strong> a string where characters are single …\nTrims <strong>in-place</strong> trailing ascii whitespaces.  This function …\nchanges a character at <em>character position</em> i to c.  This …\nA str28 can hold a string of up to 127 bytes. See docs for …\nA str16 can hold a string of up to 15 bytes. See docs for […\nEach type strN is represented underneath by a <code>[u8;N]</code> with N…\nA str32 can hold a string of up to 31 bytes. See docs for […\nAlias for internal type <code>tstr&lt;4&gt;</code>. Holds strings of up to …\nA str64 can hold a string of up to 63 bytes. See docs for […\nTypes for small strings that use an efficient …\ncreates a formated string of given type (by implementing …\nreturns a copy of the portion of the string, string could …\nin-place swap of bytes i and k, returns true on success and\nConstructs a clone of this zstr but with only lower-case …\nConstructs a clone of this zstr but with only upper-case …\nMacro for converting any expression that implements the …\nconverts zstr to a raw pointer to the first byte\nConverts zstr to a mutable pointer to the first byte.  …\nconverts zstr to &amp;str using core::str::from_utf8_unchecked.\nconverts zstr to an owned string\nshortens the zstr in-place. Note that n indicates a …\ntruncates string up to <em>byte</em> position n.  <strong>Panics</strong> if n is …\nversion of str_format! that returns an Option of the given …\nversion of make that returns the original string in an …\n<code>zstr&lt;N&gt;</code>: utf-8 strings of size up to N bytes. The strings …\nzstr type aliases for convenience")