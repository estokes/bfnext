searchState.loadedDescShard("mlua", 0, "High-level bindings to Lua\n(<strong>unsafe</strong>) All standard libraries\nThe safe subset of the standard libraries\nThe <code>+</code> operator.\nHandle to an internal Lua userdata for any type that …\nAn extension trait for <code>AnyUserData</code> that provides a variety …\nA wrapper type for an immutably borrowed value from an app …\nA wrapper type for a mutably borrowed value from an app …\nTrait for types loadable by Lua and convertible to a <code>Chunk</code>\n<code>bit</code> library\n<code>buffer</code> library\nBad argument received from Lua (usually when calling a …\nToo many arguments to <code>Function::bind</code>.\nThe Lua value <code>true</code> or <code>false</code>.\nThe call “operator” <code>obj(arg1, args2, ...)</code>.\nEither a callback or a userdata method has been called, …\nA Rust callback returned <code>Err</code>, raising the contained <code>Error</code> …\nReturned from <code>Lua::load</code> and is used to finalize loading …\nRepresents chunk mode (text or binary).\nLuau compiler\nThe string concatenation operator <code>..</code>.\n<code>Thread::resume</code> was called on an inactive coroutine.\nLuau function coverage snapshot.\n(<strong>unsafe</strong>) <code>debug</code> library\nContains information about currently executing Lua code.\nRepresents a specific event that triggered the hook.\nDeserialization error.\nA struct with options to change default deserializer …\nThe <code>/</code> operator.\nAn instance of <code>HookTriggers</code> with <code>every_line</code> trigger set.\nThe <code>==</code> operator.\nContains the error value\nError type returned by <code>mlua</code> methods.\nThe thread has raised a Lua error during execution.\n<code>Error</code> is a special builtin userdata type. When received …\nProvides the <code>context</code> method for <code>Error</code> and <code>Result&lt;T, Error&gt;</code>.\nTrait for converting <code>std::error::Error</code> into Lua <code>Error</code>.\nA custom error.\nTrait for converting <code>std::result::Result</code> into Lua <code>Result</code>.\n(<strong>unsafe</strong>) <code>ffi</code> library\nTrait for types convertible from <code>Value</code>.\nA Lua value could not be converted to the expected Rust …\nTrait for types that can be created from an arbitrary …\nHandle to an internal Lua function.\nReference to a Lua function (or closure).\nContains information about a function.\nMode of the Lua garbage collector (GC).\nLua garbage collector error, aka <code>LUA_ERRGCMM</code>.\nDetermines when a hook function will be called by Lua.\n<code>io</code> library\nThe <code>__ipairs</code> metamethod.\nIndex access <code>obj[key]</code>.\nType of Lua integer numbers.\nAn integer number.\nTrait for types convertible to <code>Value</code>.\nTrait for types convertible to any number of Lua values.\nThe <code>__iter</code> metamethod.\n<code>jit</code> library\nThe <code>&lt;=</code> operator.\nThe length operator <code>#</code>.\nA “light” userdata value. Equivalent to an unmanaged …\nA “light userdata” object, equivalent to a raw pointer.\nThe <code>&lt;</code> operator.\nTop level Lua struct which represents an instance of Lua …\nControls Lua interpreter behavior such as Rust panics …\nTrait for serializing/deserializing Lua values using Serde.\n<code>math</code> library\nLua memory error, aka <code>LUA_ERRMEM</code>\nSetting memory limit is not available.\nKinds of metamethods that can be overridden.\nA <code>MetaMethod</code> operation is restricted (typically for <code>__gc</code> …\nA <code>MetaMethod</code> (eg. <code>__index</code> or <code>__newindex</code>) has invalid type.\nA <code>RegistryKey</code> produced from a different Lua state was used.\nThe <code>%</code> operator.\nThe <code>*</code> operator.\nMultiple Lua values used for both argument passing and …\nNo libraries\nA special value (lightuserdata) to represent null value.\nIndex write access <code>obj[key] = value</code>.\nThe Lua value <code>nil</code>.\nType of Lua floating point numbers.\nA floating point number.\nAn instance of <code>HookTriggers</code> with <code>on_calls</code> trigger set.\nAn instance of <code>HookTriggers</code> with <code>on_returns</code> trigger set.\n<code>os</code> library\nContains the success value\n<code>package</code> library\nThe <code>^</code> operator.\nA Rust panic that was previously resumed, returned again.\nA mutable callback has triggered Lua code that has called …\nAn auto generated key into the Lua registry.\nA specialized <code>Result</code> type used by <code>mlua</code>’s API.\nThe thread was just created, or is suspended because it …\nLua runtime error, aka <code>LUA_ERRRUN</code>.\n<code>string</code> library\nPotentially unsafe action in safe mode.\nConstructed by the <code>Lua::scope</code> method, allows temporarily …\nSerialization error.\nA struct with options to change default serializer …\nNot enough stack space to place arguments to Lua functions …\nFlags describing the set of lua standard libraries to load.\nHandle to an internal Lua string.\nAn interned string, managed by Lua.\nThe <code>-</code> operator.\nSyntax error while parsing Lua source code.\n<code>table</code> library\nHandle to an internal Lua table.\nReference to a Lua table.\nAn extension trait for <code>Table</code>s that provides a variety of …\nAn iterator over the pairs of a Lua table.\nAn iterator over the sequence part of a Lua table.\nHandle to an internal Lua thread (coroutine).\nReference to a Lua thread (or coroutine).\nStatus of a Lua thread (coroutine).\nA Rust value could not be converted to a Lua value.\nThe <code>__tostring</code> metamethod.\nThe unary minus (<code>-</code>) operator.\nEither the thread has finished executing, or the thread is …\nTrait for custom userdata types.\nReference to a userdata object that holds a custom type …\nAn <code>AnyUserData</code> immutable borrow failed.\nAn <code>AnyUserData</code> mutable borrow failed.\nAn <code>AnyUserData</code> borrow failed because it has been …\nField registry for <code>UserData</code> implementors.\nHandle to a <code>UserData</code> metatable.\nMethod registry for <code>UserData</code> implementors.\nA wrapper type for an immutably borrowed value from a …\nA wrapper type for a mutably borrowed value from a …\nHandle to registry for userdata methods and metamethods.\nAn <code>AnyUserData</code> is not the expected type in a borrow.\nA dynamically typed Lua value. The <code>String</code>, <code>Table</code>, <code>Function</code>…\nWraps a variable number of <code>T</code>s.\nA Luau vector type.\nA Luau vector.\nType to set next Luau VM action after executing interrupt …\nAn error with additional context.\nAdd a static field to the <code>UserData</code>.\nAdd a regular field getter as a function which accepts a …\nAdd a regular field setter as a function which accepts a …\nAdd a regular field getter as a method which accepts a <code>&amp;T</code> …\nAdd a regular field setter as a method which accepts a …\nAdds custom fields specific to this userdata.\nAdds custom fields specific to this userdata.\nAdd a regular method as a function which accepts generic …\nAdd a regular method as a mutable function which accepts …\nAdd a metatable field.\nAdd a metatable field computed from <code>f</code>.\nAdd a metamethod which accepts generic arguments.\nAdd a metamethod as a mutable function which accepts …\nAdd a metamethod which accepts a <code>&amp;T</code> as the first parameter.\nAdd a metamethod as a function which accepts a <code>&amp;mut T</code> as …\nAdd a regular method which accepts a <code>&amp;T</code> as the first …\nAdd a regular method which accepts a <code>&amp;mut T</code> as the first …\nAdds custom methods and operators specific to this …\nAdds custom methods and operators specific to this …\nGets a mutable reference to an application data object …\nGets a reference to an application data object stored by …\nA metatable attachable to a Lua table to systematically …\nCast the value to boolean.\nGet the bytes that make up this string.\nGet the bytes that make up this string, including the …\nCast the value to <code>f32</code>.\nCast the value to <code>f64</code>.\nCast the value to <code>Function</code>.\nCast the value to <code>i32</code>.\nCast the value to <code>i64</code>.\nCast the value to <code>Integer</code>.\nCast the value to <code>isize</code>.\nCast the value to <code>LightUserData</code>.\nCast the value to <code>Number</code>.\nCast the value to [<code>str</code>].\nCast the value to Lua <code>String</code>.\nCast the value to <code>Cow&lt;str&gt;</code>.\nCast the value to <code>Table</code>.\nCast the value to <code>Thread</code>.\nCast the value to <code>u32</code>.\nCast the value to <code>u64</code>.\nCast the value to <code>AnyUserData</code>.\nCast the value to <code>usize</code>.\nReturns a function that, when called, calls <code>self</code>, passing …\nBorrow this userdata immutably if it is of type <code>T</code>.\nBorrow this userdata mutably if it is of type <code>T</code>.\nCalls the table as function assuming it has <code>__call</code> …\nCalls the userdata as a function assuming it has <code>__call</code> …\nLoad the chunk function and call it with the given …\nCalls the function, passing <code>args</code> as function arguments.\nGets the function associated to <code>key</code> from the table and …\nGets the function associated to <code>key</code> from the table and …\nGets the function associated to <code>key</code> from the table and …\nCalls the userdata method, assuming it has <code>__index</code> …\nSets <code>catch_rust_panics</code> option.\nCatch Rust panics when using <code>pcall</code>/<code>xpcall</code>.\nClears the table, removing all keys and values from array …\nAttempts to coerce a Lua value into an integer in a manner …\nAttempts to coerce a Lua value into a Number in a manner …\nAttempts to coerce a Lua value into a String in a manner …\nCompiles the <code>source</code> into bytecode.\nChecks whether the metatable contains a non-nil value for …\nChecks whether the table contains a non-nil value for <code>key</code>.\nWraps the error value with additional context.\nRetrieves recorded coverage information about this Lua …\nCreates a Lua userdata object from a custom Rust type.\nCreates a Lua userdata object from a custom Rust type.\nCreates a Lua userdata object from a reference to custom …\nCreates a Lua userdata object from a mutable reference to …\nWraps a C function, creating a callable Lua function …\nWraps a Rust function or closure, creating a callable Lua …\nWraps a Rust function or closure, creating a callable Lua …\nWraps a Rust mutable closure, creating a callable Lua …\nWraps a Rust mutable closure, creating a callable Lua …\nCreates a Lua userdata object from a custom userdata type.\nCreate a Lua userdata “proxy” object from a custom …\nPlace a value in the Lua registry with an auto-generated …\nCreates a table from an iterator of values, using <code>1..</code> as …\nCreates a Lua userdata object from a custom serializable …\nCreates a Lua userdata object from a custom serializable …\nCreates a Lua userdata object from a custom serializable …\nCreate and return an interned Lua string. Lua strings can …\nCreates and returns a new empty table.\nCreates a table and fills it with values from an iterator.\nCreates and returns a new empty table, with the specified …\nWraps a Lua function into a new thread (or coroutine).\nCreates a Lua userdata object from a custom userdata type.\nCreates a Lua userdata object from a custom userdata type.\nCreates a Lua userdata object from a reference to custom …\nCreates a Lua userdata object from a mutable reference to …\nCorresponds to the <code>l</code> what mask. Returns the current line.\nReturns a handle to the active <code>Thread</code>. For calls to <code>Lua</code> …\nIf true, an attempt to serialize a recursive table (table …\nIf true, an attempt to serialize types such as <code>Function</code>, …\nIf true, serialize <code>serde_json::Number</code> with …\nAttempts to downcast the external error object to a …\nDumps the function as a binary chunk.\nToggles JIT compilation mode for new chunks of code.\nReturns optional chunk environment\nReturns optional chunk environment\nReturns the environment of the Lua function.\nCompares two tables for equality.\nCompares two values for equality.\nEvaluate the chunk as either an expression or block.\nReturns the specific event that triggered the hook.\nReturns an instance of <code>HookTriggers</code> with <code>every_line</code> …\nBefore executing a new line, or returning from a function …\nReturns an instance of <code>HookTriggers</code> with …\nAfter a certain number of VM instructions have been …\nExecute this chunk of code.\nRemove any registry values whose <code>RegistryKey</code>s have all …\nWraps an external error object.\nIterates over the pairs of the table, invoking the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerforms the conversion.\nPerforms the conversion.\nDeserializes a <code>Value</code> into any serde deserializable object.\nDeserializes a <code>Value</code> into any serde deserializable object …\nPerform a full garbage-collection cycle.\nChanges the collector to incremental mode with the given …\nRestarts the Lua GC if it is not running\nSets the ‘pause’ value of the collector.\nSets the ‘step multiplier’ value of the collector.\nSteps the garbage collector one indivisible step.\nSteps the garbage collector as though memory had been …\nStop the Lua GC from running\nGets the value associated to <code>key</code> from the userdata, …\nGets the value associated to <code>key</code> from the table.\nGets the value associated to <code>key</code> from the metatable.\nReturns a reference to the metatable of this table, or <code>None</code>…\nReturns a metatable of this <code>UserData</code>.\nReturns a handle to the global environment.\nReturns the underlying Lua reference of this <code>RegistryKey</code>\nReturns information about the function.\nConstructs a new Lua instance from an existing raw state.\nGets information about the interpreter runtime stack.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad this chunk into a regular <code>Function</code>.\nPerforms the conversion.\nPerforms the conversion.\nChecks whether the type of this userdata is <code>T</code>.\nReturns <code>true</code> if the value is a boolean.\nReturns <code>true</code> if the table is empty, without invoking …\nReturns <code>true</code> if the value is a Lua <code>Function</code>.\nReturns <code>true</code> if the value is an <code>Integer</code>.\nReturns <code>true</code> if the value is a <code>LightUserData</code>.\nReturns <code>true</code> if the value is a <code>Nil</code>.\nReturns <code>true</code> if the value is a [<code>NULL</code>].\nReturns <code>true</code> if the value is a Lua <code>Number</code>.\nReturns <code>readonly</code> attribute of the table.\nReturns <code>true</code> if the value is a Lua <code>String</code>.\nReturns <code>true</code> if the value is a Lua <code>Table</code>.\nCorresponds to the <code>t</code> what mask. Returns true if the hook …\nReturns <code>true</code> if the value is a Lua <code>Thread</code>.\nReturns <code>true</code> if the value is an <code>AnyUserData</code>.\nThe line number where the definition of the function ends …\nThe line number where the definition of the function ends …\nReturns the result of the Lua <code>#</code> operator.\nThe line number where the definition of the function …\nThe line number where the definition of the function …\nReturns Lua source code as a <code>Chunk</code> builder type.\nLoads module <code>modname</code> into an existing Lua state using the …\nLoads the specified subset of the standard libraries into …\nType for native C functions that can be passed to Lua.\nA raw Lua state associated with a thread.\nReturns optional chunk mode (text or binary)\nReturns optional chunk mode (text or binary)\nReturns optional chunk name\nReturns optional chunk name\nReturns Lua metamethod name, usually prefixed by two …\nA (reasonable) name of the function (<code>None</code> if the name …\nA (reasonable) name of the function (<code>None</code> if the name …\nExplains the <code>name</code> field (can be <code>global</code>/<code>local</code>/<code>method</code>/<code>field</code>/…\nExplains the <code>name</code> field (can be <code>global</code>/<code>local</code>/<code>method</code>/<code>field</code>/…\nGet a value from the Lua registry based on a string name.\nReturns an associated value by name set by …\nCorresponds to the <code>n</code> what mask.\nCreates a new Lua state and loads the <strong>safe</strong> subset of the …\nCreates Luau compiler instance with default options\nReturns a new instance of <code>HookTriggers</code> with all triggers …\nReturns a new instance of <code>LuaOptions</code> with default …\nCreates an empty <code>Variadic</code> wrapper containing no values.\nCreates a new vector.\nCreates an empty <code>MultiValue</code> containing no values.\nCreates a new Lua state and loads the specified safe …\nReturns an associated <code>n</code>th value set by <code>set_nth_user_value</code>.\nA special value (lightuserdata) to encode/decode optional …\nReturns an instance of <code>HookTriggers</code> with <code>on_calls</code> trigger …\nBefore a function call.\nReturns an instance of <code>HookTriggers</code> with <code>on_returns</code> …\nWhen Lua returns from a function.\nReturns true if the given <code>RegistryKey</code> was created by a <code>Lua</code> …\nConverts a value that implements <code>IntoLua</code> into a <code>Value</code> …\nConverts a value that implements <code>IntoLuaMulti</code> into a …\nConsume this table and return an iterator over the pairs …\nConsumes this metatable and returns an iterator over the …\nRemoves the last element from the table and returns it.\nRe-exports most types with an extra <code>Lua*</code> prefix to prevent …\nAppends a value to the back of the table.\nGets the value associated to <code>key</code> without invoking …\nInserts element value at position <code>idx</code> to the table, …\nReturns the result of the Lua <code>#</code> operator, without invoking …\nRemoves the last element from the table and returns it, …\nAppends a value to the back of the table without invoking …\nRemoves a key from the table.\nSets a key-value pair without invoking metamethods.\nRegisters a custom Rust type in Lua to use in userdata …\nGet a value from the Lua registry by its <code>RegistryKey</code>\nRemoves an application data of type <code>T</code>.\nRemoves any hook previously set by <code>Lua::set_hook()</code> or …\nRemoves a value from the Lua registry.\nReplaces a value in the Lua registry by its <code>RegistryKey</code>.\nResumes execution of this thread.\nCreates a new <code>RuntimeError</code> with the given message.\nCalls the given function with a <code>Scope</code> parameter, giving …\nConsume this table and return an iterator over all values …\n(De)Serialization support using serde.\nIf true, serialize <code>None</code> (part of the <code>Option</code> type) to <code>null</code>. …\nIf true, serialize <code>Unit</code> (type of <code>()</code> in Rust) and Unit …\nSets the value associated to <code>key</code> in the userdata, assuming …\nSets a key-value pair in the table.\nSets a key-value pair in the metatable.\nSets or replaces an application data object of type <code>T</code>.\nIf true, sequence serialization to a Lua table will create …\nSets or overwrites a Luau compiler used for this chunk.\nSets a default Luau compiler (with custom options).\nSets Luau compiler code coverage level.\nSets Luau compiler debug level.\nSets the environment of the loaded chunk to the given …\nSets the environment of the Lua function.\nSets a ‘hook’ function that will periodically be …\nSets a ‘hook’ function that will periodically be …\nSets a memory limit (in bytes) on this Lua state.\nSets or removes the metatable of this table.\nSets whether the chunk is text or binary (autodetected by …\nSets a list of globals that are mutable.\nSets the name of this chunk, which results in more …\nSet a value in the Lua registry based on a string name.\nSets an associated value to this <code>AnyUserData</code> by name.\nSets an associated <code>n</code>th value to this <code>AnyUserData</code>.\nSets Luau compiler optimization level.\nSets <code>readonly</code> attribute on the table.\nSets Luau type information level used to guide native code …\nSets an associated value to this <code>AnyUserData</code>.\nSets a list of userdata types that will be included in the …\nSets the metatable for a Luau builtin vector type.\nA “printable” version of <code>source</code>, to be used in error …\nA “printable” version of <code>source</code>, to be used in error …\nIf true, keys in tables will be iterated in sorted order.\nReturns chunk data (can be text or binary)\nCorresponds to the <code>S</code> what mask.\nSource of the chunk that created the function.\nSource of the chunk that created the function.\nCorresponds to the <code>u</code> what mask.\nGets the status of the thread.\nTakes the value out of this userdata. Sets the special “…\nConverts this function to a generic C pointer.\nConverts this string to a generic C pointer.\nConverts this table to a generic C pointer.\nConverts this thread to a generic C pointer.\nConverts this userdata to a generic C pointer.\nConverts the value to a generic C pointer.\nGet a <code>&amp;str</code> slice if the Lua string is valid UTF-8.\nConverts the value to a string.\nConverts this string to a <code>Cow&lt;str&gt;</code>.\nConverts <code>T</code> into a <code>Value</code> instance.\nConverts <code>T</code> into a <code>Value</code> instance with options.\nTries to set or replace an application data object of type …\nReturns type name of this value.\nUnloads module <code>modname</code>.\nConverts a <code>Value</code> instance into a value that implements …\nConverts a <code>MultiValue</code> instance into a value that …\nCreates a new Lua state and loads all the standard …\nCreates a new Lua state and loads the specified subset of …\nRemoves a named value in the Lua registry.\nReturns the amount of memory (in bytes) currently used …\nReturns an associated value set by <code>set_user_value</code>.\nReturns 4th component of the vector.\nA string <code>Lua</code> if the function is a Lua function, <code>C</code> if it is …\nA string <code>Lua</code> if the function is a Lua function, <code>C</code> if it is …\nWrap the error value with additional context that is …\nWraps a Rust function or closure, returning an opaque type …\nWraps any Rust type, returning an opaque type that …\nWraps a Rust mutable closure, returning an opaque type …\nReturns 1st component of the vector.\nReturns 2nd component of the vector.\nReturns 3rd component of the vector.\nUnderlying error returned when converting argument to a …\nOriginal error returned by the Rust code.\nUnderlying error.\nA string containing additional context.\nName of the Rust type that could not be converted.\nName of the Lua type that could not be converted.\n<code>true</code> if the error can likely be fixed by appending more …\nThe error message as returned by Lua.\nA message indicating why the conversion failed in more …\nA string containing more detailed error information.\nA string containing more detailed error information.\nName of the metamethod.\nArgument name.\nArgument position (usually starts from 1).\nFunction that was called.\nName of the Lua type that could not be created.\nName of the Rust type that could not be created.\nLua call stack backtrace.\nPassed value type.\nA struct for deserializing Lua values into Rust values.\nTrait for serializing/deserializing Lua values using Serde.\nA struct for serializing Rust values into Lua values.\nA metatable attachable to a Lua table to systematically …\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserializes a <code>Value</code> into any serde deserializable object.\nDeserializes a <code>Value</code> into any serde deserializable object …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA special value (lightuserdata) to encode/decode optional …\nConverts <code>T</code> into a <code>Value</code> instance.\nConverts <code>T</code> into a <code>Value</code> instance with options.\nA struct for deserializing Lua values into Rust values.\nA struct with options to change default deserializer …\nSets <code>deny_recursive_tables</code> option.\nIf true, an attempt to serialize a recursive table (table …\nSets <code>deny_unsupported_types</code> option.\nIf true, an attempt to serialize types such as <code>Function</code>, …\nCreates a new Lua Deserializer for the <code>Value</code>.\nReturns a new instance of <code>Options</code> with default parameters.\nCreates a new Lua Deserializer for the <code>Value</code> with custom …\nSets <code>sort_keys</code> option.\nIf true, keys in tables will be iterated in sorted order.\nA struct with options to change default serializer …\nA struct for serializing Rust values into Lua values.\nSets <code>detect_serde_json_arbitrary_precision</code> option.\nIf true, serialize <code>serde_json::Number</code> with …\nCreates a new Lua Serializer with default options.\nReturns a new instance of <code>Options</code> with default parameters.\nCreates a new Lua Serializer with custom options.\nSets <code>serialize_none_to_null</code> option.\nIf true, serialize <code>None</code> (part of the <code>Option</code> type) to <code>null</code>. …\nSets <code>serialize_unit_to_null</code> option.\nIf true, serialize <code>Unit</code> (type of <code>()</code> in Rust) and Unit …\nSets <code>set_array_metatable</code> option.\nIf true, sequence serialization to a Lua table will create …")