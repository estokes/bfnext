searchState.loadedDescShard("mlua_sys", 0, "Low level bindings to Lua 5.4/5.3/5.2/5.1 (including …\nLow level bindings to Lua 5.1.\nLow level bindings to Lua 5.2.\nLow level bindings to Lua 5.3.\nLow level bindings to Lua 5.4.\nLow level bindings to Luau.\nMLua compatibility layer for Lua 5.1/JIT\nContains definitions from <code>lauxlib.h</code>.\nContains definitions from <code>lua.h</code>.\nContains definitions from <code>lualib.h</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMinimum Lua stack available to a C function\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType for memory-allocation functions\nType for native C functions that can be passed to Lua.\nType for functions to be called on debug events.\nA Lua number, usually equivalent to <code>f64</code>\nA raw Lua state associated with a thread.\nMLua compatibility layer for Lua 5.2\nContains definitions from <code>lauxlib.h</code>.\nContains definitions from <code>lua.h</code>.\nContains definitions from <code>lualib.h</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMinimum Lua stack available to a C function\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType for memory-allocation functions\nType for native C functions that can be passed to Lua\nType for functions to be called on debug events.\nA Lua number, usually equivalent to <code>f64</code>\nA raw Lua state associated with a thread.\nA Lua unsigned integer, equivalent to <code>u32</code> in Lua 5.2\nMLua compatibility layer for Lua 5.3\nContains definitions from <code>lauxlib.h</code>.\nContains definitions from <code>lua.h</code>.\nContains definitions from <code>lualib.h</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMinimum Lua stack available to a C function\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType for memory-allocation functions\nType for native C functions that can be passed to Lua\nType for functions to be called on debug events.\nA Lua integer, usually equivalent to <code>i64</code>\nType for continuation-function contexts\nType for continuation functions\nA Lua number, usually equivalent to <code>f64</code>\nA raw Lua state associated with a thread.\nA Lua unsigned integer, usually equivalent to <code>u64</code>\nContains definitions from <code>lauxlib.h</code>.\nContains definitions from <code>lua.h</code>.\nContains definitions from <code>lualib.h</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMinimum Lua stack available to a C function\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType for memory-allocation functions\nType for native C functions that can be passed to Lua\nType for functions to be called on debug events.\nA Lua integer, usually equivalent to <code>i64</code>\nType for continuation-function contexts\nType for continuation functions\nA Lua number, usually equivalent to <code>f64</code>\nA raw Lua state associated with a thread.\nA Lua unsigned integer, usually equivalent to <code>u64</code>\nType for warning functions\nMLua compatibility layer for Luau.\nContains definitions from <code>lualib.h</code>.\nContains definitions from <code>lua.h</code>.\nContains definitions from <code>luacode.h</code>.\nContains definitions from <code>luacodegen.h</code>.\nContains definitions from <code>lualib.h</code>.\nBuffer size used for on-stack string operations. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGuaranteed number of Lua stack slots available to a C …\ngets called when BREAK instruction is encountered\ngets called when thread execution is interrupted by break …\ngets called when protected call results in an error\ngets called after each instruction in single step mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngets called at safepoints (loop back edges, call/ret, gc) …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nType for memory-allocation functions.\nType for native C functions that can be passed to Lua.\nType for functions to be called on debug events.\nA Lua integer, equivalent to <code>i32</code>.\nA Lua number, usually equivalent to <code>f64</code>.\nA raw Lua state associated with a thread.\nType for userdata destructor functions.\nA Lua unsigned integer, equivalent to <code>u32</code>.\nReturns Luau release version (eg. <code>0.xxx</code>).\ngets called when memory is allocated\ngets called when an unprotected error is raised (if …\ngets called when a string is created; returned atom can be …\narbitrary userdata pointer that is never overwritten by …\ngets called when L is created (LP == parent) or destroyed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")