(function() {
    var type_impls = Object.fromEntries([["fixedstr",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3CTA%3E-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#855-862\">Source</a><a href=\"#impl-Add%3CTA%3E-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>, TA: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html\" title=\"trait core::ops::arith::Add\">Add</a>&lt;TA&gt; for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#856\">Source</a><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#857-861\">Source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: TA) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/arith/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<TA>","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3Cstr%3E-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#569-574\">Source</a><a href=\"#impl-AsMut%3Cstr%3E-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#570-573\">Source</a><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<str>","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3Cstr%3E-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#564-568\">Source</a><a href=\"#impl-AsRef%3Cstr%3E-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#565-567\">Source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<str>","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#44\">Source</a><a href=\"#impl-Clone-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#44\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>Returns a duplicate of the value. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/clone.rs.html#213-215\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#723-727\">Source</a><a href=\"#impl-Debug-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#724-726\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#694-698\">Source</a><a href=\"#impl-Default-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3><div class=\"docblock\"><p>defaults to empty string</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#695-697\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.90.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#557-562\">Source</a><a href=\"#impl-Deref-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#558\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#559-561\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/lib.rs.html#401\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/lib.rs.html#401\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;&gt;(deserializer: D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, D::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#654-659\">Source</a><a href=\"#impl-Display-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#655-658\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26T%3E-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#576-580\">Source</a><a href=\"#impl-From%3C%26T%3E-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#577-579\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&T>","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+T%3E-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#581-585\">Source</a><a href=\"#impl-From%3C%26mut+T%3E-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>, const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut T</a>&gt; for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#582-584\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(s: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&mut T>","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#910-919\">Source</a><a href=\"#impl-FromStr-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#911\">Source</a><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = &amp;'static <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#912-918\">Source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#associatedtype.Err\" title=\"type core::str::traits::FromStr::Err\">Err</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"https://doc.rust-lang.org/1.90.0/core/str/traits/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#891-895\">Source</a><a href=\"#impl-Hash-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#892-894\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.90.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#615-619\">Source</a><a href=\"#impl-Ord-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#616-618\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1013-1015\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1052-1054\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1078-1080\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3C%26str%3E-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#661-665\">Source</a><a href=\"#impl-PartialEq%3C%26str%3E-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt; for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#662-664\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq<&str>","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#904-908\">Source</a><a href=\"#impl-PartialEq-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#905-907\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#265\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#608-613\">Source</a><a href=\"#impl-PartialOrd-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#609-612\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1387\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1405\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1423\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/cmp.rs.html#1441\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/lib.rs.html#401\">Source</a><a href=\"#impl-Serialize-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/lib.rs.html#401\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;(&amp;self, serializer: S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;S::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, S::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Write-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#771-780\">Source</a><a href=\"#impl-Write-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html\" title=\"trait core::fmt::Write\">Write</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3><div class=\"docblock\"><p>Usage:</p>\n</div></section></summary><div class=\"docblock\">\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>  <span class=\"kw\">use </span>core::fmt::Write;\n  <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = zstr::&lt;<span class=\"number\">32</span>&gt;::new();\n  <span class=\"kw\">let </span>result = <span class=\"macro\">write!</span>(<span class=\"kw-2\">&amp;mut </span>s,<span class=\"string\">\"hello {}, {}, {}\"</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);\n  <span class=\"comment\">/* or */\n  </span><span class=\"kw\">let </span>s2 = <span class=\"macro\">str_format!</span>(zstr&lt;<span class=\"number\">16</span>&gt;,<span class=\"string\">\"abx{}{}{}\"</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>);</code></pre></div>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#772-779\">Source</a><a href=\"#method.write_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#tymethod.write_str\" class=\"fn\">write_str</a>(&amp;mut self, s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Writes a string slice into this writer, returning whether the write\nsucceeded. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#tymethod.write_str\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_char\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.1.0\">1.1.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/fmt/mod.rs.html#180\">Source</a></span><a href=\"#method.write_char\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#method.write_char\" class=\"fn\">write_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Writes a <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\" title=\"primitive char\"><code>char</code></a> into this writer, returning whether the write succeeded. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#method.write_char\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_fmt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.90.0/src/core/fmt/mod.rs.html#209\">Source</a></span><a href=\"#method.write_fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#method.write_fmt\" class=\"fn\">write_fmt</a>(&amp;mut self, args: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Arguments.html\" title=\"struct core::fmt::Arguments\">Arguments</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Glue for usage of the <a href=\"https://doc.rust-lang.org/1.90.0/core/macro.write.html\" title=\"macro core::write\"><code>write!</code></a> macro with implementors of this trait. <a href=\"https://doc.rust-lang.org/1.90.0/core/fmt/trait.Write.html#method.write_fmt\">Read more</a></div></details></div></details>","Write","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-zstr%3CM%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#621-652\">Source</a><a href=\"#impl-zstr%3CM%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const M: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;M&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.resize\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#630-642\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.resize\" class=\"fn\">resize</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>converts an zstr&lt;M&gt; to an zstr&lt;N&gt;. If the length of the string being\nconverted is greater than N-1, the extra characters are ignored.\nThis operation produces a copy (non-destructive).\nExample:</p>\n\n<div class=\"example-wrap ignore\"><a href=\"#\" class=\"tooltip\" title=\"This example is not tested\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code>  <span class=\"kw\">let </span>s1:zstr&lt;<span class=\"number\">8</span>&gt; = zstr::from(<span class=\"string\">\"abcdefg\"</span>);\n  <span class=\"kw\">let </span>s2:zstr&lt;<span class=\"number\">16</span>&gt; = s1.resize();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reallocate\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#645-651\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.reallocate\" class=\"fn\">reallocate</a>&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt;(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>version of resize that does not allow string truncation due to length</p>\n</div></details></div></details>",0,"fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#48-555\">Source</a><a href=\"#impl-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.make\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#53-60\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.make\" class=\"fn\">make</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>creates a new <code>zstr&lt;N&gt;</code> with given &amp;str.  If the length of s exceeds\nN, the extra characters are ignored.\nThis function is also called by\nseveral others including <a href=\"fixedstr/struct.zstr.html#method.from\" title=\"associated function fixedstr::zstr::from\">zstr::from</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#64-66\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.create\" class=\"fn\">create</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>alias for <a href=\"fixedstr/struct.zstr.html#method.make\" title=\"associated function fixedstr::zstr::make\">zstr::make</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_make\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#70-76\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.try_make\" class=\"fn\">try_make</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>version of make that returns the original string in an <code>Err(_)</code> if\ntruncation is requried, or in an <code>Ok(_)</code> if no truncation is required</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#80-84\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>creates an empty string, equivalent to zstr::default() but can also\nbe called in a const context</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.const_make\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#90-101\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.const_make\" class=\"fn\">const_make</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>const constructor, to be called from const contexts.  However, as\nconst constructors are restricted from using iterators, it’s slightly\nbetter to call the non-const constructors in non-const contexts.\nTruncates automatically.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.const_try_make\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#104-107\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.const_try_make\" class=\"fn\">const_try_make</a>(s: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>version of <code>const_make</code> that does not truncate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#116-124\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.from_raw\" class=\"fn\">from_raw</a>(s: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>]) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>const function that\ncreates a new <code>zstr&lt;N&gt;</code> with given <code>&amp;[u8]</code> slice.  If the length of the\nslice exceeds N-1, the extra bytes are ignored.  All bytes of the slice\nfollowing the first zero-byte are also ignored.\n<strong>This operation does not check if the u8 slice is an utf8 source.</strong>\nThis function is unique to zstr and not available for the\nother string types in this crate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#131-133\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Length of the string in bytes (consistent with <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html#method.len\" title=\"method str::len\">str::len</a>).\nThis function uses binary search to find the first zero-byte\nand runs in O(log N) time for each <code>zstr&lt;N&gt;</code>.  This function\ncan be called from a const context.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.linear_len\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#140-146\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.linear_len\" class=\"fn\">linear_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Length of a <code>zstr&lt;N&gt;</code> string in bytes using O(n) linear search,\nmay be useful when the string is of length n but n is known to be\nmuch smaller than N, or when the underlying array is corrupted.\nThis function is const, and is unique to the zstr type and\nnot available for other string types in this crate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.check_integrity\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#151-163\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.check_integrity\" class=\"fn\">check_integrity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>const function that checks that the underlying array of the zstr is\nproperly zero-terminated, with no non-zero bytes after the first\nzero.  Returns false if there’s a problem.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clean\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#167-176\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.clean\" class=\"fn\">clean</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Guarantees that the underlying array of the zstr is\nproperly zero-terminated, with no non-zero bytes after the first zero.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#180-185\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>returns maximum capacity in bytes</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_string\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#207-209\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.to_string\" class=\"fn\">to_string</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a></h4></section></summary><div class=\"docblock\"><p>converts zstr to an owned string</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#213-215\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>returns slice of u8 array underneath the zstr, <strong>including the terminating 0</strong></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#218-221\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.as_bytes_mut\" class=\"fn\">as_bytes_mut</a>(&amp;mut self) -&gt; &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut [u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>returns mutable slice of the u8 array underneath, including the terminating zero.  <strong>WARNING:</strong> changing a byte to zero in the middle of the string is not enough to zero-terminate the string: the length calculation via binary search will become invalid. All bytes following the first zero must also be zeroed.  Use with care.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes_non_terminated\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#225-227\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.as_bytes_non_terminated\" class=\"fn\">as_bytes_non_terminated</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>returns slice of u8 array underneath the zstr without the terminating zero</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_str\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#230-232\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.to_str\" class=\"fn\">to_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>converts zstr to &amp;str using <a href=\"https://doc.rust-lang.org/1.90.0/core/str/converts/fn.from_utf8_unchecked.html\" title=\"fn core::str::converts::from_utf8_unchecked\">core::str::from_utf8_unchecked</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#234-236\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.as_str\" class=\"fn\">as_str</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>checked version of <a href=\"fixedstr/struct.zstr.html#method.to_str\" title=\"method fixedstr::zstr::to_str\">zstr::to_str</a>, but may panic (calls <code>unwrap</code>)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_str_safe\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#238-240\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.as_str_safe\" class=\"fn\">as_str_safe</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.90.0/core/str/error/struct.Utf8Error.html\" title=\"struct core::str::error::Utf8Error\">Utf8Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>version of <a href=\"fixedstr/struct.zstr.html#method.as_str\" title=\"method fixedstr::zstr::as_str\">zstr::as_str</a> that does not call <code>unwrap</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#247-258\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.set\" class=\"fn\">set</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>changes a character at <em>character position</em> i to c.  This function\nrequires that c is in the same character class (ascii or unicode)\nas the char being replaced.  It never shuffles the bytes underneath.\nThe function returns true if the change was successful.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#264-266\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.push\" class=\"fn\">push</a>&lt;'t&gt;(&amp;mut self, s: &amp;'t <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; &amp;'t <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>adds chars to end of current string up to maximum size N of <code>zstr&lt;N&gt;</code>,\nreturns the portion of the push string that was NOT pushed due to\ncapacity, so\nif “” is returned then all characters were pushed successfully.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_str\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#269-285\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.push_str\" class=\"fn\">push_str</a>&lt;'t&gt;(&amp;mut self, src: &amp;'t <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>) -&gt; &amp;'t <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>alias for <a href=\"fixedstr/struct.zstr.html#method.push\" title=\"method fixedstr::zstr::push\">zstr::push</a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push_char\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#289-302\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.push_char\" class=\"fn\">push_char</a>(&amp;mut self, c: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>pushes a single character to the end of the string, returning\ntrue on success.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pop_char\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#305-317\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.pop_char\" class=\"fn\">pop_char</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;</h4></section></summary><div class=\"docblock\"><p>remove and return last character in string, if it exists</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.charlen\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#322-324\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.charlen\" class=\"fn\">charlen</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>returns the number of characters in the string regardless of\ncharacter class.  For strings with only single-byte chars,\ncall <a href=\"fixedstr/struct.zstr.html#method.len\" title=\"method fixedstr::zstr::len\">Self::len</a> instead.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#327-330\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.nth\" class=\"fn\">nth</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a>&gt;</h4></section></summary><div class=\"docblock\"><p>returns the nth character of the zstr</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth_bytechar\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#337-339\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.nth_bytechar\" class=\"fn\">nth_bytechar</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>returns the nth byte of the string as a char.  This\nfunction should only be called on, for example, ascii strings.  It\nis designed to be quicker than <a href=\"fixedstr/struct.zstr.html#method.nth\" title=\"method fixedstr::zstr::nth\">zstr::nth</a>, and does not check array bounds or\ncheck n against the length of the string. Nor does it check\nif the value returned is a valid character.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.nth_ascii\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#341-343\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.nth_ascii\" class=\"fn\">nth_ascii</a>(&amp;self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.char.html\">char</a></h4></section></summary><div class=\"docblock\"><p>alias for nth_bytechar (for backwards compatibility)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_ascii\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#346-348\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.is_ascii\" class=\"fn\">is_ascii</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>determines if string is an ascii string</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#355-365\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.truncate\" class=\"fn\">truncate</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>shortens the zstr in-place. Note that n indicates\na <em>character</em> position to truncate up to, not the byte position.\nIf n is greater than the\ncurrent character length of the string, this operation will have no effect.\nThis is not an O(1) operation.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.truncate_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#373-383\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.truncate_bytes\" class=\"fn\">truncate_bytes</a>(&amp;mut self, n: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>truncates string up to <em>byte</em> position n.  <strong>Panics</strong> if n is\nnot on a character boundary truncate on owned Strings.\nAlthough faster than <a href=\"fixedstr/struct.zstr.html#method.truncate\" title=\"method fixedstr::zstr::truncate\">zstr::truncate</a>, this function is still\nnot O(1) because it zeros the truncated bytes.  This is a calculated\ntradeoff with a O(log N) <a href=\"fixedstr/struct.zstr.html#method.len\" title=\"method fixedstr::zstr::len\">zstr::len</a> function, which is expected to\nhave greater impact.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.right_ascii_trim\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#388-395\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.right_ascii_trim\" class=\"fn\">right_ascii_trim</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Trims <strong>in-place</strong> trailing ascii whitespaces.  This function\nregards all bytes as single chars.  The operation panics if\nthe resulting string does not end on a character boundary.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#401-409\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.reverse_bytes\" class=\"fn\">reverse_bytes</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Reverses <strong>in-place</strong> a string where characters are single bytes.\nThe result of this operation on non single-byte chars is unpredicatable.\nThis function is only available for the zstr type and not for other\nstring types in this crate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#414-421\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(&amp;mut self, i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>in-place swap of bytes i and k, returns true on success and\nfalse if indices are out of bounds.  This function is only available\nfor zstr strings and not for other string types in this crate.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#424-427\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>resets string to empty string</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_lowercase\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#431-440\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.make_ascii_lowercase\" class=\"fn\">make_ascii_lowercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>in-place modification of ascii characters to lower-case, panics\nif the string is not ascii.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_ascii_uppercase\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#444-453\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.make_ascii_uppercase\" class=\"fn\">make_ascii_uppercase</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>in-place modification of ascii characters to upper-case, panics if\nthe string is not ascii.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_upper\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#458-462\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.to_ascii_upper\" class=\"fn\">to_ascii_upper</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a clone of this zstr but with only upper-case ascii\ncharacters.  This contrasts with <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html#method.to_ascii_uppercase\" title=\"method str::to_ascii_uppercase\">str::to_ascii_uppercase</a>,\nwhich creates an owned String.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ascii_lower\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#467-471\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.to_ascii_lower\" class=\"fn\">to_ascii_lower</a>(&amp;self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Constructs a clone of this zstr but with only lower-case ascii\ncharacters.  This contrasts with <a href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html#method.to_ascii_lowercase\" title=\"method str::to_ascii_lowercase\">str::to_ascii_lowercase</a>,\nwhich creates an owned String.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.case_insensitive_eq\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#475-497\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.case_insensitive_eq\" class=\"fn\">case_insensitive_eq</a>&lt;TA&gt;(&amp;self, other: TA) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    TA: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.str.html\">str</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Tests for ascii case-insensitive equality with another string.\nThis function does not check if either string is ascii.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#501-505\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"fixedstr/struct.zstr.html#tymethod.to_ptr\" class=\"fn\">to_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>converts zstr to a raw pointer to the first byte</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ptr_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#511-513\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.to_ptr_mut\" class=\"fn\">to_ptr_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a></h4></section></summary><div class=\"docblock\"><p>Converts zstr to a mutable pointer to the first byte.  Although\ntechnically not ‘unsafe’, this function can be used to alter\nthe underlying representation so that there are non-zero values\nafter the first zero.  Use with care.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ptr\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#517-527\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"fixedstr/struct.zstr.html#tymethod.from_ptr\" class=\"fn\">from_ptr</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.pointer.html\">*const </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u8.html\">u8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a zstr from a raw pointer by copying bytes until the\nfirst zero is encountered or when maximum capacity (N-1) is reached.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_utf16\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#532-554\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.from_utf16\" class=\"fn\">from_utf16</a>(v: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.u16.html\">u16</a>]) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.90.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self&gt;</h4></section></summary><div class=\"docblock\"><p>Decodes a UTF-16 encodeded slice. If a decoding error is encountered\nor capacity exceeded, an <code>Err(s)</code> is returned where s is the\nthe encoded string up to the point of the error.</p>\n</div></details></div></details>",0,"fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#729-752\">Source</a><a href=\"#impl-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.substr\" class=\"method\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#732-751\">Source</a><h4 class=\"code-header\">pub fn <a href=\"fixedstr/struct.zstr.html#tymethod.substr\" class=\"fn\">substr</a>(&amp;self, start: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>, end: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h4></section></summary><div class=\"docblock\"><p>returns a copy of the portion of the string, string could be truncated\nif indices are out of range. Similar to slice [start..end]</p>\n</div></details></div></details>",0,"fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<section id=\"impl-Copy-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#44\">Source</a><a href=\"#impl-Copy-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section>","Copy","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"],["<section id=\"impl-Eq-for-zstr%3CN%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/fixedstr/zero_terminated.rs.html#44\">Source</a><a href=\"#impl-Eq-for-zstr%3CN%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;const N: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.90.0/std/primitive.usize.html\">usize</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.90.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"fixedstr/struct.zstr.html\" title=\"struct fixedstr::zstr\">zstr</a>&lt;N&gt;</h3></section>","Eq","fixedstr::zero_terminated::ztr8","fixedstr::zero_terminated::ztr16","fixedstr::zero_terminated::ztr32","fixedstr::zero_terminated::ztr64","fixedstr::zero_terminated::ztr128"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[91279]}